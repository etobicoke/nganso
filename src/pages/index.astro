---
import Layout from '../layouts/Layout.astro';
import { Prism } from '@astrojs/prism';
---

<Layout title="ngan.so - coming soon">
	<div class="home">
	    <video autoplay muted loop>
	        <source src="/assets/videos/vid0.mp4" type="video/mp4" id="video" />
        </video>
        <div class="overlay"></div>
        <div class="home-content">
            <h1>
                <span>I'm working on it.</span>
            </h1>
            <h5 class="meantime">In the meantime, please feel free to e-mail me at:</h5>
            <h4>gustave `at` nganso `dot` com....</h4>
            <section class="logo-section">
                <div>
                    <span class="github-logo">
                        <a href="https://github.com/etobicoke/">
                            <img src="/assets/images/svg/iconmonstr-github-3.svg" alt="GitHub Logo"/>
                        </a>
                    </span>
                    <span class="linkedin-logo">
                        <a href="https://www.linkedin.com/in/gnganso-javascript-developer-engineer-architect/">
                            <img src="/assets/images/svg/iconmonstr-linkedin-3.svg" alt="LinkedIn Logo"/>
                        </a>
                    </span>
                </div>
            </section>
        </div>
	</div>
</Layout>
<style>
	:root {
		--astro-gradient: linear-gradient(0deg, #4f39fa, #da62c4);
	}

	* {
		box-sizing: border-box;
		margin: 0;
		padding: 0;
	}

	h1 {
		margin: 2rem 0;
	}

	main {
		margin: auto;
		padding: 1.5em;
		max-width: 60ch;
	}

	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}

	.link-card-grid > * {
		transition: transform 0.3s ease;
	}

	.link-card-grid > *:hover {
		transform: scale(1.05);
	}
</style>
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const getVidSource = (videoSrc) => `assets/videos/${videoSrc}.mp4`;

        // Construct the array using Array.from for better readability
        const vidArr = Array.from({ length: 10 }, (_, index) => `vid${index}`);

        const videoElement = document.getElementById("video");

        if (!videoElement) {
            console.error("Error: Video element with ID 'video' not found in the DOM.");
            return;
        }

        // Randomly select a video ID and set the source
        const selectedVideo = vidArr[Math.floor(Math.random() * vidArr.length)];
        const srcAttr = getVidSource(selectedVideo);

        // Set the video source and load it
        videoElement.setAttribute("src", srcAttr);
        videoElement.load();

        // Optional: Add an event listener for error handling
        videoElement.addEventListener("error", () => {
            console.error(`Failed to load the video from source: ${srcAttr}`);
        });

        // Log the selected video for debugging
        console.log(`Video loaded: ${srcAttr}`);
    });
</script>
