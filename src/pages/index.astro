---
import Layout from '../layouts/Layout.astro';
import { Prism } from '@astrojs/prism';
---

<Layout title="nganso.com - coming soon">
	<div class="home">
	    <video autoplay muted loop>
	        <source src="/assets/videos/vid0.mp4" type="video/mp4" id="video" />
        </video>
        <div class="overlay"></div>
        <div class="home-content">
          <h1>
            <span>I'm Working On It.</span>
          </h1>
          <h5 class="meantime">In the meantime, please feel free to e-mail me at:</h5>
          <h4>gustave `at` nganso `dot` com</h4>
          <section class="logo-section">
            <div>
                <span class="github-logo">
                    <a href="https://github.com/etobicoke/">
                        <img src="/assets/images/svg/iconmonstr-github-3.svg" alt="GitHub Logo"/>
                    </a>
                </span>
                <span class="linkedin-logo">
                    <a href="https://www.linkedin.com/in/gnganso">
                        <img src="/assets/images/svg/iconmonstr-linkedin-3.svg" alt="LinkedIn Logo"/>
                    </a>
                </span>
            </div>
          </section>
        </div>
	</div>
</Layout>
<style>
	:root {
		--astro-gradient: linear-gradient(0deg, #4f39fa, #da62c4);
	}

	* {
		box-sizing: border-box;
		margin: 0;
		padding: 0;
	}

	h1 {
		margin: 2rem 0;
	}

	main {
		margin: auto;
		padding: 1.5em;
		max-width: 60ch;
	}

	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}

	.link-card-grid > * {
		transition: transform 0.3s ease;
	}

	.link-card-grid > *:hover {
		transform: scale(1.05);
	}
</style>
<script>
/*
  // Self-invoking function on page load.
  (function(){
    // Arrow function implementation for video retrieval
    const getVidSource = (videoSrc) => `assets/videos/${videoSrc}.mp4`;

    // Rewriting vidArr
    let vidArr = Array.apply(null, Array(10)).map((x, v) => ("vid" + v));

    // Selecting the video element
    let videoPlayer = document.getElementsByTagName('video')[0];

    // Randomly retrieving video from vidArr array
    let video = vidArr[Math.floor(Math.random()*vidArr.length)];

    // Get video URL
    let srcAttr = getVidSource(video);

    // Setting video source attribute
    document.getElementById("video").setAttribute("src", srcAttr);

    // Loading the video
    videoPlayer.load();
  })();
  */

  // Possible version of above logic.
  /*
    (function initializeVideoPlayer() {
      // Define video sources
      const videoSources = Array.from({ length: 10 }, (_, index) => `assets/videos/vid${index}.mp4`);

      // Select the video element
      const videoPlayer = document.querySelector('video');

      // Get a random video source
      const randomVideoIndex = Math.floor(Math.random() * videoSources.length);
      const randomVideoSource = videoSources[randomVideoIndex];

      // Set the video source attribute
      videoPlayer.src = randomVideoSource;

      // Load the video
      videoPlayer.load();
    })();
    */


    // Way better version?
    // Wait for the DOM content to be fully loaded before executing the script
    document.addEventListener("DOMContentLoaded", function() {
      // Function to construct the video source URL
      const getVidSource = (videoSrc) => `assets/videos/${videoSrc}.mp4`;

      // Create an array of video IDs (e.g., ["vid0", "vid1", ...])
      let vidArr = [];
      for (let v = 0; v < 10; v++) {
        vidArr.push("vid" + v);
      }

      // Find the video element with the ID "video"
      const videoElement = document.getElementById("video");

      // Check if the video element was found
      if (!videoElement) {
        console.error("Video element not found.");
        return;
      }

      // Choose a random video ID from the array
      const video = vidArr[Math.floor(Math.random() * vidArr.length)];

      // Generate the video source URL based on the chosen video ID
      const srcAttr = getVidSource(video);

      // Set the video source attribute
      videoElement.setAttribute("src", srcAttr);

      // Load the video
      videoElement.load();
    });


</script>
